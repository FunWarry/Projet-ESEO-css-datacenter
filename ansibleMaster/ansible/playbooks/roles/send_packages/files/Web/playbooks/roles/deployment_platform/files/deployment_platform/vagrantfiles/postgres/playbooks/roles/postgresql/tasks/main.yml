---
- name: Add PostgreSQL APT repository key
  apt_key:
    url: https://www.postgresql.org/media/keys/ACCC4CF8.asc
    state: present

- name: Add PostgreSQL APT repository
  apt_repository:
    repo: deb http://apt.postgresql.org/pub/repos/apt/ {{ ansible_distribution_release }}-pgdg main
    state: present
    filename: postgresql
    update_cache: yes

- name: Install PostgreSQL and Python PostgreSQL client
  apt:
    name:
      - postgresql-14
      - postgresql-contrib-14
      - python3-psycopg2
      - libpq-dev
    state: present
    update_cache: yes

- name: Ensure PostgreSQL is running and enabled
  service:
    name: postgresql
    state: started
    enabled: yes

- name: Configure PostgreSQL to listen on all interfaces
  lineinfile:
    path: /etc/postgresql/14/main/postgresql.conf
    regexp: '^#?listen_addresses\s*='
    line: "listen_addresses = '*'"
    backup: yes
  notify: restart postgresql

- name: Configure client authentication
  copy:
    dest: /etc/postgresql/14/main/pg_hba.conf
    content: |
      # TYPE  DATABASE        USER            ADDRESS                 METHOD
      local   all             postgres                                peer
      local   all             all                                     peer
      host    all             all             127.0.0.1/32            md5
      host    all             all             ::1/128                 md5
      host    all             all             0.0.0.0/0               md5
    backup: yes
  notify: restart postgresql

- name: Create PostgreSQL user
  postgresql_user:
    name: "{{ db_user }}"
    password: "{{ db_password }}"
    role_attr_flags: "CREATEDB,LOGIN"
    state: present
  become: yes
  become_user: postgres
  no_log: true
  register: user_created
  until: user_created is succeeded
  retries: 5
  delay: 5
  when: db_user is defined and db_password is defined

- name: Create application database
  postgresql_db:
    name: "{{ db_name }}"
    owner: "{{ db_user }}"
    state: present
    encoding: 'UTF-8'
    lc_ctype: 'en_US.UTF-8'
    lc_collate: 'en_US.UTF-8'
    template: template0
  become: yes
  become_user: postgres
  when: db_name is defined

- name: Ensure PostgreSQL service is restarted if needed
  meta: flush_handlers

- name: Ensure PostgreSQL is accepting connections
  postgresql_ping:
    login_host: localhost
    login_user: postgres
    login_password: ""
  register: pg_ping
  until: pg_ping.is_available
  retries: 5
  delay: 5
  changed_when: false
  become: yes
  become_user: postgres
